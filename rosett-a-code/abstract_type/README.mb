# Rust

Rust doesn't have traditional object oriented concepts
such as classes, instead it uses a concept called traits.
Traits are similar to abstract classes in the 
sense that they define an interface a struct must conform to.
A trait can be defined as such:

```
trait Shape {
    fn area(self) -> i32;
}

//The triat can then be implemented on a struct.

struct Square{
    side_length: i32,
}

impl Shape for Square {
    fn area(self) -> i32 {
        self.side_length * self.side_length
    }
}

// Note, trait can also have a default implementation:

triat Shape{
    fn area(self) -> i32;

    fn is_shape(self) -> bool {
        true
    }
}

```
