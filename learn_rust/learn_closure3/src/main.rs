/// 闭包可以通过三种方式捕获其环境，他们对应函数的三种获取参数的方式，分别是获取所有权
/// 可变借用，不可变借用
/// 这三种捕获值的方式被编码为如下三个triat：
/// 1 FnOnce 消费从周围作用域捕获的变量。闭包周围的作用域被称为环境，为了消费捕获的变量，
/// 闭包必须获取其所有权并在定义闭包时将其移进闭包，其名称的Once部分代表了闭包不能多次获取
/// 相同变量的所有权
/// 2 FnMut 获取可变的借用值，所以可以改变其环境。
/// 3 Fn 从其环境获取不可变的借用值。
/// 当创建一个闭包时，rust会根据其如何使用环境 中的变量来推断我们希望如何引用环境，由于
/// 所有闭包都可以被调用至少一次，因为所有闭包都实现了FnOnce, 没有移动被捕获变量的所有权
/// 到闭包的闭包也实现了FnMut, 而不需要对捕获的变量进行可变访问的闭包实现了Fn。
fn main() {
    // let x = 4;
    // let equal_to_x = |z: i32| z == x;
    // let y = 4;
    // assert!(equal_to_x(y)); 
    // println!("Hello, world!");

    let x = String::from("hello");
    let equal_to_x = move |z| z == x;
    // println!("x = {}", x);
    let y = String::from("hello");
    assert!(equal_to_x(y));


}

